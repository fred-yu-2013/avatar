# -*- coding: utf-8 -*-
"""
此文件无用，仅作无目的测试用
"""
import json
import re
import base64
from datetime import datetime
import pytz
import requests


def example1():
    s = "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"
    s = base64.b64encode(s)
    print s
    print json.loads(s)

def example2():
    """
    从某个时区的timestamp获取转时间
    :return:
    """
    print datetime.fromtimestamp(1453315200, pytz.timezone('UTC'))  # u'showDay' (58923968)
    print datetime.fromtimestamp(1453314240, pytz.timezone('Asia/Amman'))  # u'endTime' (58924496)
    print datetime.fromtimestamp(1453142138, pytz.timezone('UTC'))  # u'startTime' (58924520)
    for tz in pytz.all_timezones:
        t = datetime.fromtimestamp(1453314240, pytz.timezone(tz))
        if t.day == 20 and t.hour == 20:
            print t, tz

    print datetime.fromtimestamp(1453315200, pytz.timezone('UTC')).replace(tzinfo=None)
    print datetime.fromtimestamp(1453314240, pytz.timezone('Asia/Amman')).replace(tzinfo=None)


def example3():
    arr = [71,69,84,32,104,116,116,112,58,47,47,97,112,105,46,109,101,105,116,117,97,110,46,99,111,109,47,99,105,110,101,109,97,47,118,54,47,99,105,110,101,109,97,115,46,106,115,111,110,32,95,95,115,107,99,107,61,54,97,51,55,53,98,99,101,56,99,54,54,97,48,100,99,50,57,51,56,54,48,100,102,97,56,51,56,51,51,101,102,38,95,95,115,107,110,111,61,101,55,57,98,49,51,53,57,45,102,50,99,54,45,52,56,102,53,45,98,102,102,48,45,49,54,52,99,99,97,55,50,50,50,100,98,38,95,95,115,107,115,99,61,104,116,116,112,38,95,95,115,107,116,115,61,49,52,53,51,56,48,55,54,56,54,54,55,48,38,95,95,115,107,117,97,61,54,55,50,53,97,102,100,57,51,101,56,53,57,51,97,99,48,52,97,98,101,98,49,53,54,53,51,101,50,56,49,53,38,95,95,118,104,111,115,116,61,97,112,105,46,109,97,111,121,97,110,46,99,111,109,38,99,104,97,110,110,101,108,73,100,61,49,38,99,105,61,49,48,38,99,108,105,101,110,116,84,121,112,101,61,97,110,100,114,111,105,100,38,99,116,61,37,69,52,37,66,56,37,56,65,37,69,54,37,66,53,37,66,55,38,100,77,111,100,101,108,61,65,51,49,38,100,118,105,100,61,56,54,55,54,54,51,48,50,52,48,49,52,56,48,50,38,108,97,116,61,51,49,46,49,57,56,51,49,57,38,108,110,103,61,49,50,49,46,52,48,51,49,55,56,38,109,111,118,105,101,66,117,110,100,108,101,86,101,114,115,105,111,110,61,54,52,48,50,38,110,101,116,61,50,53,53,38,117,116,109,95,99,97,109,112,97,105,103,110,61,65,109,111,118,105,101,66,109,111,118,105,101,67,68,45,49,38,117,116,109,95,99,111,110,116,101,110,116,61,56,54,55,54,54,51,48,50,52,48,49,52,56,48,50,38,117,116,109,95,109,101,100,105,117,109,61,97,110,100,114,111,105,100,38,117,116,109,95,115,111,117,114,99,101,61,119,97,110,100,111,117,106,105,97,38,117,116,109,95,116,101,114,109,61,54,46,52,46,48,38,117,117,105,100,61,68,56,68,50,48,50,52,70,50,68,52,67,52,51,51,50,51,55,54,67,66,49,54,50,70,48,53,55,57,67,70,68,66,68,69,49,48,53,55,52,52,70,65,53,55,48,49,48,48,67,69,70,53,51,70,66,55,68,69,69,69,56,55,68]
    chars = map(lambda n: chr(n), arr)
    print ''.join(chars)


def example4():
    for tz in pytz.all_timezones:
        print tz, datetime.now(pytz.timezone(tz))


def example5():
    """
    测试ajax请求
    :return:
    """
    url = 'http://m.gewara.com/movie/m/ajax/chooseMovieOpi.xhtml'
    headers = {
        'Host': 'm.gewara.com',
        'Connection': 'keep-alive',
        # 'Content-Length': '41',
        'Cache-Control': 'no-cache,no-store',
        'Origin': 'http://m.gewara.com',
        'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1',
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'text/javascript, text/html, application/xml, text/xml, */*',
        'X-Requested-With': 'XMLHttpRequest',
        'If-Modified-Since': '0',
        # 'Referer': 'http://m.gewara.com/movie/m/choiceMovie.xhtml?cid=10',
        'Accept-Encoding': 'gzip, deflate',
        'Accept-Language': 'zh-CN,zh;q=0.8,en;q=0.6,id;q=0.4,zh-TW;q=0.2',
        'Cookie': '__utma=232105481.764884724.1450353341.1451028002.1451963591.9; __utmz=232105481.1450692670.2.2.utmcsr=baidu|utmccn=(organic)|utmcmd=organic; _gwtc_=1455767842098_R4hv_3ae0; Hm_lvt_8bfee023e1e68ac3a080fa535c651f00=1455767780; Hm_lpvt_8bfee023e1e68ac3a080fa535c651f00=1455768005; __utmt=1; __utma=224121287.138487630.1455767843.1455767843.1455773999.2; __utmb=224121287.2.10.1455773999; __utmc=224121287; __utmz=224121287.1455767843.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); Hm_lvt_8c7313b43793ee561c89b311e22045da=1455767844; Hm_lpvt_8c7313b43793ee561c89b311e22045da=1455774077; citycode=310000',
    }
    # data = 'mid=223896773&cid=10&discountid=&adverId='
    data = 'mid=283057190&cid=10&discountid=&adverId=&opiClick=true&openDate=2016-02-18'

    s = requests.Session()
    content = s.post(url, data=data, headers=headers)
    pass

if __name__ == '__main__':
    example5()
